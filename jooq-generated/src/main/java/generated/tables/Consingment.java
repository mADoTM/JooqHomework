/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.records.ConsingmentRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Consingment extends TableImpl<ConsingmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.consingment</code>
     */
    public static final Consingment CONSINGMENT = new Consingment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConsingmentRecord> getRecordType() {
        return ConsingmentRecord.class;
    }

    /**
     * The column <code>public.consingment.consingment_id</code>.
     */
    public final TableField<ConsingmentRecord, Integer> CONSINGMENT_ID = createField(DSL.name("consingment_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.consingment.order_date</code>.
     */
    public final TableField<ConsingmentRecord, LocalDate> ORDER_DATE = createField(DSL.name("order_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.consingment.company_id</code>.
     */
    public final TableField<ConsingmentRecord, Integer> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Consingment(Name alias, Table<ConsingmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Consingment(Name alias, Table<ConsingmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.consingment</code> table reference
     */
    public Consingment(String alias) {
        this(DSL.name(alias), CONSINGMENT);
    }

    /**
     * Create an aliased <code>public.consingment</code> table reference
     */
    public Consingment(Name alias) {
        this(alias, CONSINGMENT);
    }

    /**
     * Create a <code>public.consingment</code> table reference
     */
    public Consingment() {
        this(DSL.name("consingment"), null);
    }

    public <O extends Record> Consingment(Table<O> child, ForeignKey<O, ConsingmentRecord> key) {
        super(child, key, CONSINGMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ConsingmentRecord> getPrimaryKey() {
        return Keys.CONSINGMENT_PK;
    }

    @Override
    public List<ForeignKey<ConsingmentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSINGMENT__CONSINGMENT_COMPANY_ID_FKEY);
    }

    private transient Company _company;

    /**
     * Get the implicit join path to the <code>public.company</code> table.
     */
    public Company company() {
        if (_company == null)
            _company = new Company(this, Keys.CONSINGMENT__CONSINGMENT_COMPANY_ID_FKEY);

        return _company;
    }

    @Override
    public Consingment as(String alias) {
        return new Consingment(DSL.name(alias), this);
    }

    @Override
    public Consingment as(Name alias) {
        return new Consingment(alias, this);
    }

    @Override
    public Consingment as(Table<?> alias) {
        return new Consingment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Consingment rename(String name) {
        return new Consingment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Consingment rename(Name name) {
        return new Consingment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Consingment rename(Table<?> name) {
        return new Consingment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, LocalDate, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super LocalDate, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super LocalDate, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
