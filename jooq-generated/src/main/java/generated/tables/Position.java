/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.records.PositionRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Position extends TableImpl<PositionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.position</code>
     */
    public static final Position POSITION = new Position();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PositionRecord> getRecordType() {
        return PositionRecord.class;
    }

    /**
     * The column <code>public.position.cost</code>.
     */
    public final TableField<PositionRecord, Integer> COST = createField(DSL.name("cost"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.position.inner_code</code>.
     */
    public final TableField<PositionRecord, Integer> INNER_CODE = createField(DSL.name("inner_code"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.position.amount</code>.
     */
    public final TableField<PositionRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.position.consingment_id</code>.
     */
    public final TableField<PositionRecord, Integer> CONSINGMENT_ID = createField(DSL.name("consingment_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Position(Name alias, Table<PositionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Position(Name alias, Table<PositionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.position</code> table reference
     */
    public Position(String alias) {
        this(DSL.name(alias), POSITION);
    }

    /**
     * Create an aliased <code>public.position</code> table reference
     */
    public Position(Name alias) {
        this(alias, POSITION);
    }

    /**
     * Create a <code>public.position</code> table reference
     */
    public Position() {
        this(DSL.name("position"), null);
    }

    public <O extends Record> Position(Table<O> child, ForeignKey<O, PositionRecord> key) {
        super(child, key, POSITION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<PositionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.POSITION__POSITION_INNER_CODE_FKEY, Keys.POSITION__POSITION_CONSINGMENT_ID_FKEY);
    }

    private transient Product _product;
    private transient Consingment _consingment;

    /**
     * Get the implicit join path to the <code>public.product</code> table.
     */
    public Product product() {
        if (_product == null)
            _product = new Product(this, Keys.POSITION__POSITION_INNER_CODE_FKEY);

        return _product;
    }

    /**
     * Get the implicit join path to the <code>public.consingment</code> table.
     */
    public Consingment consingment() {
        if (_consingment == null)
            _consingment = new Consingment(this, Keys.POSITION__POSITION_CONSINGMENT_ID_FKEY);

        return _consingment;
    }

    @Override
    public Position as(String alias) {
        return new Position(DSL.name(alias), this);
    }

    @Override
    public Position as(Name alias) {
        return new Position(alias, this);
    }

    @Override
    public Position as(Table<?> alias) {
        return new Position(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Position rename(String name) {
        return new Position(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Position rename(Name name) {
        return new Position(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Position rename(Table<?> name) {
        return new Position(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
